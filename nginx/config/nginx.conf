events {
    worker_connections 1024;
}

http {
    upstream keycloakServer {
        server keycloak:8080; # default port for Keycloak
    }

    server {
        listen 80 default_server;
        server_name localhost;
        return 301 https://localhost:8443$request_uri; # redirect all http requests to https
    }

    server {
        listen 443 ssl;
        server_name localhost;
        ssl_certificate /etc/nginx/ssl/localhost/localhost.crt;
        ssl_certificate_key /etc/nginx/ssl/localhost/localhost.key;

        location / {
            proxy_pass http://keycloakServer; # No https here, because we are using edge setup within Keycloak
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /restricted {
            auth_request /auth; # Authenticate using Keycloak.  auth_request /auth; # Authenticate using Keycloak. If the subrequest returns a 2xx response code, the access is allowed
            proxy_pass http://restricted_service; # Proxy to the restricted service
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    location = /auth {
        internal;
        proxy_pass http://keycloakServer/auth/realms/my_realm/protocol/openid-connect/auth?response_type=code&client_id=my-client&redirect_uri=https://localhost:8443/auth/callback;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
    }

    location = /auth/callback {
        internal;
        proxy_pass http://keycloakServer/auth/realms/my_realm/protocol/openid-connect/token;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
    }
}
